generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   @default("user") // user, admin, moderator, support
  verified     Boolean  @default(false)
  balance      Decimal  @default(0) @db.Decimal(10, 2)
  avatarUrl    String?  @map("avatar_url")
  bio          String?
  languages    String[] @default(["English"])
  vacationMode Boolean  @default(false) @map("vacation_mode")
  lastBoostAt  DateTime? @map("last_boost_at")
  averageRating Decimal @default(0) @db.Decimal(3, 2) @map("average_rating") // 0.00 to 5.00
  totalReviews Int      @default(0) @map("total_reviews")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  listings        Listing[]
  buyerOrders     Order[]     @relation("BuyerOrders")
  sellerOrders    Order[]     @relation("SellerOrders")
  sentMessages    Message[]   @relation("SenderMessages")
  receivedMessages Message[]  @relation("ReceiverMessages")
  reviews         Review[]
  transactions    Transaction[]
  withdrawals     Withdrawal[]
  userLimits      UserLimit[]

  @@map("users")
}

model Game {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  imageUrl      String?  @map("image_url")
  platformTypes String[] @map("platform_types") // ["PC", "Mobile", "Console"]
  orderIndex    Int      @map("order_index")
  active        Boolean  @default(true)
  
  // Relations
  categories Category[]
  listings   Listing[]
  userLimits UserLimit[]

  @@map("games")
}

model Category {
  id             String @id @default(cuid())
  gameId         String @map("game_id")
  name           String
  slug           String
  commissionRate Decimal @map("commission_rate") @db.Decimal(5, 2) // percentage
  fieldsConfig   Json    @map("fields_config") // Dynamic field configuration
  active         Boolean @default(true)
  
  // Relations
  game       Game        @relation(fields: [gameId], references: [id])
  listings   Listing[]
  userLimits UserLimit[]

  @@unique([gameId, slug])
  @@map("categories")
}

model Listing {
  id           String   @id @default(cuid())
  sellerId     String   @map("seller_id")
  gameId       String   @map("game_id")
  categoryId   String   @map("category_id")
  title        String
  price        Decimal  @db.Decimal(10, 2)
  description  String
  deliveryType String   @map("delivery_type") // instant, manual
  stockType    String   @map("stock_type") // limited, unlimited
  quantity     Int?
  images       String[] // URLs
  customFields Json     @map("custom_fields") // Dynamic fields based on category
  boostedAt    DateTime? @map("boosted_at")
  hidden       Boolean  @default(false)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  seller   User     @relation(fields: [sellerId], references: [id])
  game     Game     @relation(fields: [gameId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  orders   Order[]

  @@map("listings")
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  COMPLETED
  REFUNDED
  DISPUTED
}

model Order {
  id              String      @id @default(cuid())
  listingId       String      @map("listing_id")
  buyerId         String      @map("buyer_id")
  sellerId        String      @map("seller_id")
  amount          Decimal     @db.Decimal(10, 2)
  commission      Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  paymentMethod   String?     @map("payment_method")
  escrowReleaseAt DateTime?   @map("escrow_release_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  
  // Relations
  listing      Listing       @relation(fields: [listingId], references: [id])
  buyer        User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller       User          @relation("SellerOrders", fields: [sellerId], references: [id])
  messages     Message[]
  review       Review?
  transactions Transaction[]

  @@map("orders")
}

model Message {
  id                   String   @id @default(cuid())
  orderId              String   @map("order_id")
  senderId             String   @map("sender_id")
  receiverId           String   @map("receiver_id")
  content              String
  type                 String   @default("text") // text, image, system
  attachmentUrl        String?  @map("attachment_url")
  isAutomatedDelivery Boolean  @default(false) @map("is_automated_delivery")
  readAt               DateTime? @map("read_at")
  createdAt            DateTime @default(now()) @map("created_at")
  
  // Relations
  order    Order @relation(fields: [orderId], references: [id])
  sender   User  @relation("SenderMessages", fields: [senderId], references: [id])
  receiver User  @relation("ReceiverMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Review {
  id        String   @id @default(cuid())
  orderId   String   @unique @map("order_id")
  buyerId   String   @map("buyer_id")
  sellerId  String   @map("seller_id")
  rating    Int // 1-5
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  order  Order @relation(fields: [orderId], references: [id])
  buyer  User  @relation(fields: [buyerId], references: [id])

  @@map("reviews")
}

enum TransactionType {
  PAYMENT
  COMMISSION
  REFUND
  WITHDRAWAL
  DEPOSIT
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String          @map("user_id")
  orderId       String?         @map("order_id")
  type          TransactionType
  amount        Decimal         @db.Decimal(10, 2)
  status        String          @default("completed")
  paymentMethod String?         @map("payment_method")
  referenceId   String?         @map("reference_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  
  // Relations
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("transactions")
}

model Withdrawal {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  amount      Decimal   @db.Decimal(10, 2)
  fee         Decimal   @db.Decimal(10, 2)
  method      String
  status      String    @default("pending")
  processedAt DateTime? @map("processed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("withdrawals")
}

model UserLimit {
  id           String @id @default(cuid())
  userId       String @map("user_id")
  gameId       String @map("game_id")
  categoryId   String @map("category_id")
  maxListings  Int    @map("max_listings") @default(3)
  
  // Relations
  user     User     @relation(fields: [userId], references: [id])
  game     Game     @relation(fields: [gameId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, gameId, categoryId])
  @@map("user_limits")
}

model Blacklist {
  id        String   @id @default(cuid())
  type      String   // ip, payment_account, user_id
  value     String
  reason    String
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("blacklist")
}
